// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: sql/sqlpb/sql.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SQLClient is the client API for SQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLClient interface {
	Execute(ctx context.Context, opts ...grpc.CallOption) (SQL_ExecuteClient, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type sQLClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLClient(cc grpc.ClientConnInterface) SQLClient {
	return &sQLClient{cc}
}

func (c *sQLClient) Execute(ctx context.Context, opts ...grpc.CallOption) (SQL_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &SQL_ServiceDesc.Streams[0], "/toydb.sqlpb.SQL/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &sQLExecuteClient{stream}
	return x, nil
}

type SQL_ExecuteClient interface {
	Send(*ExecuteRequest) error
	Recv() (*ExecuteResponse, error)
	grpc.ClientStream
}

type sQLExecuteClient struct {
	grpc.ClientStream
}

func (x *sQLExecuteClient) Send(m *ExecuteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sQLExecuteClient) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sQLClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/toydb.sqlpb.SQL/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLServer is the server API for SQL service.
// All implementations should embed UnimplementedSQLServer
// for forward compatibility
type SQLServer interface {
	Execute(SQL_ExecuteServer) error
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

// UnimplementedSQLServer should be embedded to have forward compatible implementations.
type UnimplementedSQLServer struct {
}

func (UnimplementedSQLServer) Execute(SQL_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedSQLServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

// UnsafeSQLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLServer will
// result in compilation errors.
type UnsafeSQLServer interface {
	mustEmbedUnimplementedSQLServer()
}

func RegisterSQLServer(s grpc.ServiceRegistrar, srv SQLServer) {
	s.RegisterService(&SQL_ServiceDesc, srv)
}

func _SQL_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SQLServer).Execute(&sQLExecuteServer{stream})
}

type SQL_ExecuteServer interface {
	Send(*ExecuteResponse) error
	Recv() (*ExecuteRequest, error)
	grpc.ServerStream
}

type sQLExecuteServer struct {
	grpc.ServerStream
}

func (x *sQLExecuteServer) Send(m *ExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sQLExecuteServer) Recv() (*ExecuteRequest, error) {
	m := new(ExecuteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SQL_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toydb.sqlpb.SQL/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQL_ServiceDesc is the grpc.ServiceDesc for SQL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toydb.sqlpb.SQL",
	HandlerType: (*SQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _SQL_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _SQL_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sql/sqlpb/sql.proto",
}
