// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: toypb/toydb.proto

package toypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToyDBClient is the client API for ToyDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToyDBClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type toyDBClient struct {
	cc grpc.ClientConnInterface
}

func NewToyDBClient(cc grpc.ClientConnInterface) ToyDBClient {
	return &toyDBClient{cc}
}

func (c *toyDBClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/ToyDB/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toyDBClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ToyDB/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToyDBServer is the server API for ToyDB service.
// All implementations must embed UnimplementedToyDBServer
// for forward compatibility
type ToyDBServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedToyDBServer()
}

// UnimplementedToyDBServer must be embedded to have forward compatible implementations.
type UnimplementedToyDBServer struct {
}

func (UnimplementedToyDBServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedToyDBServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedToyDBServer) mustEmbedUnimplementedToyDBServer() {}

// UnsafeToyDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToyDBServer will
// result in compilation errors.
type UnsafeToyDBServer interface {
	mustEmbedUnimplementedToyDBServer()
}

func RegisterToyDBServer(s grpc.ServiceRegistrar, srv ToyDBServer) {
	s.RegisterService(&ToyDB_ServiceDesc, srv)
}

func _ToyDB_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToyDBServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ToyDB/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToyDBServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToyDB_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToyDBServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ToyDB/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToyDBServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToyDB_ServiceDesc is the grpc.ServiceDesc for ToyDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToyDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToyDB",
	HandlerType: (*ToyDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _ToyDB_Execute_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ToyDB_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toypb/toydb.proto",
}
