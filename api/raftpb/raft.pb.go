// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: raftpb/raft.proto

package raftpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientRequest_Type int32

const (
	ClientRequest_QUERY  ClientRequest_Type = 0
	ClientRequest_MUTATE ClientRequest_Type = 1
	ClientRequest_STATUS ClientRequest_Type = 2
)

// Enum value maps for ClientRequest_Type.
var (
	ClientRequest_Type_name = map[int32]string{
		0: "QUERY",
		1: "MUTATE",
		2: "STATUS",
	}
	ClientRequest_Type_value = map[string]int32{
		"QUERY":  0,
		"MUTATE": 1,
		"STATUS": 2,
	}
)

func (x ClientRequest_Type) Enum() *ClientRequest_Type {
	p := new(ClientRequest_Type)
	*p = x
	return p
}

func (x ClientRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_raftpb_raft_proto_enumTypes[0].Descriptor()
}

func (ClientRequest_Type) Type() protoreflect.EnumType {
	return &file_raftpb_raft_proto_enumTypes[0]
}

func (x ClientRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientRequest_Type.Descriptor instead.
func (ClientRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{8, 0}
}

// Message is passed between Raft nodes.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Term is the current term of the sender.
	//
	// Must be set, unless the message is sent to or received from a local client,
	// in which case event must be either ClientRequest or ClientResponse.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// From is the sender's id.
	//
	// 0 means the message is from a local client.
	From uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// To is the recipient's id.
	//
	// 0 means the message is to a local client.
	To uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	// Event is the event contained within the message.
	//
	// Types that are assignable to Event:
	//
	//	*Message_Heartbeat
	//	*Message_ConfirmLeader
	//	*Message_SolicitVote
	//	*Message_GrantVote
	//	*Message_AppendEntries
	//	*Message_AcceptEntries
	//	*Message_RejectEntries
	//	*Message_ClientRequest
	//	*Message_ClientResponse
	Event isMessage_Event `protobuf_oneof:"event"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Message) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Message) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (m *Message) GetEvent() isMessage_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Message) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetEvent().(*Message_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *Message) GetConfirmLeader() *ConfirmLeader {
	if x, ok := x.GetEvent().(*Message_ConfirmLeader); ok {
		return x.ConfirmLeader
	}
	return nil
}

func (x *Message) GetSolicitVote() *SolicitVote {
	if x, ok := x.GetEvent().(*Message_SolicitVote); ok {
		return x.SolicitVote
	}
	return nil
}

func (x *Message) GetGrantVote() *GrantVote {
	if x, ok := x.GetEvent().(*Message_GrantVote); ok {
		return x.GrantVote
	}
	return nil
}

func (x *Message) GetAppendEntries() *AppendEntries {
	if x, ok := x.GetEvent().(*Message_AppendEntries); ok {
		return x.AppendEntries
	}
	return nil
}

func (x *Message) GetAcceptEntries() *AcceptEntries {
	if x, ok := x.GetEvent().(*Message_AcceptEntries); ok {
		return x.AcceptEntries
	}
	return nil
}

func (x *Message) GetRejectEntries() *RejectEntries {
	if x, ok := x.GetEvent().(*Message_RejectEntries); ok {
		return x.RejectEntries
	}
	return nil
}

func (x *Message) GetClientRequest() *ClientRequest {
	if x, ok := x.GetEvent().(*Message_ClientRequest); ok {
		return x.ClientRequest
	}
	return nil
}

func (x *Message) GetClientResponse() *ClientResponse {
	if x, ok := x.GetEvent().(*Message_ClientResponse); ok {
		return x.ClientResponse
	}
	return nil
}

type isMessage_Event interface {
	isMessage_Event()
}

type Message_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

type Message_ConfirmLeader struct {
	ConfirmLeader *ConfirmLeader `protobuf:"bytes,5,opt,name=confirm_leader,json=confirmLeader,proto3,oneof"`
}

type Message_SolicitVote struct {
	SolicitVote *SolicitVote `protobuf:"bytes,6,opt,name=solicit_vote,json=solicitVote,proto3,oneof"`
}

type Message_GrantVote struct {
	GrantVote *GrantVote `protobuf:"bytes,7,opt,name=grant_vote,json=grantVote,proto3,oneof"`
}

type Message_AppendEntries struct {
	AppendEntries *AppendEntries `protobuf:"bytes,8,opt,name=append_entries,json=appendEntries,proto3,oneof"`
}

type Message_AcceptEntries struct {
	AcceptEntries *AcceptEntries `protobuf:"bytes,9,opt,name=accept_entries,json=acceptEntries,proto3,oneof"`
}

type Message_RejectEntries struct {
	RejectEntries *RejectEntries `protobuf:"bytes,10,opt,name=reject_entries,json=rejectEntries,proto3,oneof"`
}

type Message_ClientRequest struct {
	ClientRequest *ClientRequest `protobuf:"bytes,11,opt,name=client_request,json=clientRequest,proto3,oneof"`
}

type Message_ClientResponse struct {
	ClientResponse *ClientResponse `protobuf:"bytes,12,opt,name=client_response,json=clientResponse,proto3,oneof"`
}

func (*Message_Heartbeat) isMessage_Event() {}

func (*Message_ConfirmLeader) isMessage_Event() {}

func (*Message_SolicitVote) isMessage_Event() {}

func (*Message_GrantVote) isMessage_Event() {}

func (*Message_AppendEntries) isMessage_Event() {}

func (*Message_AcceptEntries) isMessage_Event() {}

func (*Message_RejectEntries) isMessage_Event() {}

func (*Message_ClientRequest) isMessage_Event() {}

func (*Message_ClientResponse) isMessage_Event() {}

// Heartbeat is sent by the leader to the followers to
// maintain the leader's authority.
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommitIndex is the index of the leader's last committed log entry.
	CommitIndex uint64 `protobuf:"varint,1,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	// CommitTerm is the term of the leader's last committed log entry.
	CommitTerm uint64 `protobuf:"varint,2,opt,name=commit_term,json=commitTerm,proto3" json:"commit_term,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{1}
}

func (x *Heartbeat) GetCommitIndex() uint64 {
	if x != nil {
		return x.CommitIndex
	}
	return 0
}

func (x *Heartbeat) GetCommitTerm() uint64 {
	if x != nil {
		return x.CommitTerm
	}
	return 0
}

// ConfirmLeader is sent by the follower to the leader to confirm
// the leader's authority after receiving a heartbeat.
type ConfirmLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommitIndex is the original commit index of the leader's heartbeat.
	// This is used to confirm read requests.
	CommitIndex uint64 `protobuf:"varint,1,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	// HasCommitted is true if the follower has committed the leader's last
	// committed log entry. If false, the leader will send the follower the
	// missing log entries.
	HasCommitted bool `protobuf:"varint,2,opt,name=has_committed,json=hasCommitted,proto3" json:"has_committed,omitempty"`
}

func (x *ConfirmLeader) Reset() {
	*x = ConfirmLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmLeader) ProtoMessage() {}

func (x *ConfirmLeader) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmLeader.ProtoReflect.Descriptor instead.
func (*ConfirmLeader) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{2}
}

func (x *ConfirmLeader) GetCommitIndex() uint64 {
	if x != nil {
		return x.CommitIndex
	}
	return 0
}

func (x *ConfirmLeader) GetHasCommitted() bool {
	if x != nil {
		return x.HasCommitted
	}
	return false
}

// SolicitVote is sent by a candidate to its peers to solicit votes.
type SolicitVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LastIndex is the index of the candidate's last log entry.
	LastIndex uint64 `protobuf:"varint,1,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	// LastTerm is the term of the candidate's last log entry.
	LastTerm uint64 `protobuf:"varint,2,opt,name=last_term,json=lastTerm,proto3" json:"last_term,omitempty"`
}

func (x *SolicitVote) Reset() {
	*x = SolicitVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolicitVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolicitVote) ProtoMessage() {}

func (x *SolicitVote) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolicitVote.ProtoReflect.Descriptor instead.
func (*SolicitVote) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{3}
}

func (x *SolicitVote) GetLastIndex() uint64 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

func (x *SolicitVote) GetLastTerm() uint64 {
	if x != nil {
		return x.LastTerm
	}
	return 0
}

// GrantVote is sent by a follower to a candidate to grant it a vote, on a
// first-come basis. Candidates implicitly vote for themselves.
type GrantVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GrantVote) Reset() {
	*x = GrantVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantVote) ProtoMessage() {}

func (x *GrantVote) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantVote.ProtoReflect.Descriptor instead.
func (*GrantVote) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{4}
}

// AppendEntries is sent by the leader to the followers to replicate
// log entries.
type AppendEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entries is the list of log entries to append.
	Entries []*Entry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *AppendEntries) Reset() {
	*x = AppendEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntries) ProtoMessage() {}

func (x *AppendEntries) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntries.ProtoReflect.Descriptor instead.
func (*AppendEntries) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{5}
}

func (x *AppendEntries) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// AcceptEntries is sent by a follower to the leader to tell it that it has
// accepted the leader's AppendEntries request.
type AcceptEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LastIndex is the index of the last log entry.
	LastIndex uint64 `protobuf:"varint,1,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
}

func (x *AcceptEntries) Reset() {
	*x = AcceptEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptEntries) ProtoMessage() {}

func (x *AcceptEntries) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptEntries.ProtoReflect.Descriptor instead.
func (*AcceptEntries) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{6}
}

func (x *AcceptEntries) GetLastIndex() uint64 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

// RejectEntries is sent by a follower to the leader to reject its AppendEntries
// request. The leader will decrement its next index for the follower and retry.
type RejectEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectEntries) Reset() {
	*x = RejectEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectEntries) ProtoMessage() {}

func (x *RejectEntries) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectEntries.ProtoReflect.Descriptor instead.
func (*RejectEntries) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{7}
}

// ClientRequest is client's request to the Raft cluster. This can be submitted
// to the leader, or to a follower, which will forward it to  its leader. If there
// is no leader or term changes, the request will be aborted.
type ClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the globally unique identifier of the request.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type is the type of the request.
	Type ClientRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=raftpb.ClientRequest_Type" json:"type,omitempty"`
	// Command is the command to be executed (For QUERY and MUTATE).
	Command []byte `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{8}
}

func (x *ClientRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClientRequest) GetType() ClientRequest_Type {
	if x != nil {
		return x.Type
	}
	return ClientRequest_QUERY
}

func (x *ClientRequest) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

// ClientResponse is the response to a ClientRequest.
type ClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the response id. This matches the id of ClientRequest.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type is the response type. This matches the type of ClientRequest.
	Type ClientRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=raftpb.ClientRequest_Type" json:"type,omitempty"`
	// Result is the result of executing the command.
	Result []byte `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// Status is the status of the STATUS request.
	Status *Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Error is the error message if the request failed.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ClientResponse) Reset() {
	*x = ClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResponse) ProtoMessage() {}

func (x *ClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResponse.ProtoReflect.Descriptor instead.
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{9}
}

func (x *ClientResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClientResponse) GetType() ClientRequest_Type {
	if x != nil {
		return x.Type
	}
	return ClientRequest_QUERY
}

func (x *ClientResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ClientResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClientResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Entry is a log entry in the Raft log.
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term    uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Command []byte `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{10}
}

func (x *Entry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Entry) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Entry) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

// Status is the status of a Raft node.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server        uint64            `protobuf:"varint,1,opt,name=server,proto3" json:"server,omitempty"`
	Leader        uint64            `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Term          uint64            `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	NodeLastIndex map[uint64]uint64 `protobuf:"bytes,4,rep,name=node_last_index,json=nodeLastIndex,proto3" json:"node_last_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CommitIndex   uint64            `protobuf:"varint,5,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	ApplyIndex    uint64            `protobuf:"varint,6,opt,name=apply_index,json=applyIndex,proto3" json:"apply_index,omitempty"`
	Storage       string            `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageSize   int64             `protobuf:"varint,8,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{11}
}

func (x *Status) GetServer() uint64 {
	if x != nil {
		return x.Server
	}
	return 0
}

func (x *Status) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *Status) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Status) GetNodeLastIndex() map[uint64]uint64 {
	if x != nil {
		return x.NodeLastIndex
	}
	return nil
}

func (x *Status) GetCommitIndex() uint64 {
	if x != nil {
		return x.CommitIndex
	}
	return 0
}

func (x *Status) GetApplyIndex() uint64 {
	if x != nil {
		return x.ApplyIndex
	}
	return 0
}

func (x *Status) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *Status) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

var File_raftpb_raft_proto protoreflect.FileDescriptor

var file_raftpb_raft_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x04, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x53,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x57, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x0b,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x0d, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x22, 0xa6, 0x01,
	0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4b, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x49, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x40,
	0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x32, 0x43, 0x0a, 0x04, 0x52, 0x61, 0x66, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x79, 0x6d, 0x6f, 0x6c, 0x65, 0x2f, 0x67,
	0x6f, 0x2d, 0x74, 0x6f, 0x79, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x61, 0x66, 0x74,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raftpb_raft_proto_rawDescOnce sync.Once
	file_raftpb_raft_proto_rawDescData = file_raftpb_raft_proto_rawDesc
)

func file_raftpb_raft_proto_rawDescGZIP() []byte {
	file_raftpb_raft_proto_rawDescOnce.Do(func() {
		file_raftpb_raft_proto_rawDescData = protoimpl.X.CompressGZIP(file_raftpb_raft_proto_rawDescData)
	})
	return file_raftpb_raft_proto_rawDescData
}

var file_raftpb_raft_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_raftpb_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_raftpb_raft_proto_goTypes = []interface{}{
	(ClientRequest_Type)(0), // 0: raftpb.ClientRequest.Type
	(*Message)(nil),         // 1: raftpb.Message
	(*Heartbeat)(nil),       // 2: raftpb.Heartbeat
	(*ConfirmLeader)(nil),   // 3: raftpb.ConfirmLeader
	(*SolicitVote)(nil),     // 4: raftpb.SolicitVote
	(*GrantVote)(nil),       // 5: raftpb.GrantVote
	(*AppendEntries)(nil),   // 6: raftpb.AppendEntries
	(*AcceptEntries)(nil),   // 7: raftpb.AcceptEntries
	(*RejectEntries)(nil),   // 8: raftpb.RejectEntries
	(*ClientRequest)(nil),   // 9: raftpb.ClientRequest
	(*ClientResponse)(nil),  // 10: raftpb.ClientResponse
	(*Entry)(nil),           // 11: raftpb.Entry
	(*Status)(nil),          // 12: raftpb.Status
	nil,                     // 13: raftpb.Status.NodeLastIndexEntry
	(*emptypb.Empty)(nil),   // 14: google.protobuf.Empty
}
var file_raftpb_raft_proto_depIdxs = []int32{
	2,  // 0: raftpb.Message.heartbeat:type_name -> raftpb.Heartbeat
	3,  // 1: raftpb.Message.confirm_leader:type_name -> raftpb.ConfirmLeader
	4,  // 2: raftpb.Message.solicit_vote:type_name -> raftpb.SolicitVote
	5,  // 3: raftpb.Message.grant_vote:type_name -> raftpb.GrantVote
	6,  // 4: raftpb.Message.append_entries:type_name -> raftpb.AppendEntries
	7,  // 5: raftpb.Message.accept_entries:type_name -> raftpb.AcceptEntries
	8,  // 6: raftpb.Message.reject_entries:type_name -> raftpb.RejectEntries
	9,  // 7: raftpb.Message.client_request:type_name -> raftpb.ClientRequest
	10, // 8: raftpb.Message.client_response:type_name -> raftpb.ClientResponse
	11, // 9: raftpb.AppendEntries.entries:type_name -> raftpb.Entry
	0,  // 10: raftpb.ClientRequest.type:type_name -> raftpb.ClientRequest.Type
	0,  // 11: raftpb.ClientResponse.type:type_name -> raftpb.ClientRequest.Type
	12, // 12: raftpb.ClientResponse.status:type_name -> raftpb.Status
	13, // 13: raftpb.Status.node_last_index:type_name -> raftpb.Status.NodeLastIndexEntry
	1,  // 14: raftpb.Raft.SendMessages:input_type -> raftpb.Message
	14, // 15: raftpb.Raft.SendMessages:output_type -> google.protobuf.Empty
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_raftpb_raft_proto_init() }
func file_raftpb_raft_proto_init() {
	if File_raftpb_raft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raftpb_raft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolicitVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_raftpb_raft_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_Heartbeat)(nil),
		(*Message_ConfirmLeader)(nil),
		(*Message_SolicitVote)(nil),
		(*Message_GrantVote)(nil),
		(*Message_AppendEntries)(nil),
		(*Message_AcceptEntries)(nil),
		(*Message_RejectEntries)(nil),
		(*Message_ClientRequest)(nil),
		(*Message_ClientResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raftpb_raft_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raftpb_raft_proto_goTypes,
		DependencyIndexes: file_raftpb_raft_proto_depIdxs,
		EnumInfos:         file_raftpb_raft_proto_enumTypes,
		MessageInfos:      file_raftpb_raft_proto_msgTypes,
	}.Build()
	File_raftpb_raft_proto = out.File
	file_raftpb_raft_proto_rawDesc = nil
	file_raftpb_raft_proto_goTypes = nil
	file_raftpb_raft_proto_depIdxs = nil
}
